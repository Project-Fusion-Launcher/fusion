// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
  async getGames(
    refetch: boolean,
    filters: GameFilters | null,
  ): Promise<Result<Game[], string>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("get_games", { refetch, filters }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async fetchGameVersions(
    gameId: string,
    gameSource: GameSource,
  ): Promise<Result<GameVersion[], string>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("fetch_game_versions", { gameId, gameSource }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async fetchGameVersionInfo(
    gameId: string,
    gameSource: GameSource,
    versionId: string,
  ): Promise<Result<GameVersionInfo, string>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("fetch_game_version_info", {
          gameId,
          gameSource,
          versionId,
        }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async downloadGame(
    gameId: string,
    gameSource: GameSource,
    versionId: string,
    downloadOptions: DownloadOptions,
  ): Promise<Result<null, string>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("download_game", {
          gameId,
          gameSource,
          versionId,
          downloadOptions,
        }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async launchGame(
    gameId: string,
    gameSource: GameSource,
  ): Promise<Result<null, string>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("launch_game", { gameId, gameSource }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async uninstallGame(
    gameId: string,
    gameSource: GameSource,
  ): Promise<Result<null, string>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("uninstall_game", { gameId, gameSource }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async hideGame(
    gameId: string,
    gameSource: GameSource,
  ): Promise<Result<null, string>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("hide_game", { gameId, gameSource }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async pause(): Promise<Result<null, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("pause") };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
};

/** user-defined events **/

export const events = __makeEvents__<{
  gameDownloadFinished: GameDownloadFinished;
  gameDownloadProgress: GameDownloadProgress;
  gameDownloadQueued: GameDownloadQueued;
  gameHidden: GameHidden;
  gameInstalled: GameInstalled;
  gameUninstalled: GameUninstalled;
  gameUninstalling: GameUninstalling;
}>({
  gameDownloadFinished: "game-download-finished",
  gameDownloadProgress: "game-download-progress",
  gameDownloadQueued: "game-download-queued",
  gameHidden: "game-hidden",
  gameInstalled: "game-installed",
  gameUninstalled: "game-uninstalled",
  gameUninstalling: "game-uninstalling",
});

/** user-defined constants **/

/** user-defined types **/

export type DownloadOptions = { installLocation: string };
/**
 * This is a reduced version of the Game model used to avoid sending unnecessary data to the frontend.
 */
export type Game = {
  id: string;
  source: GameSource;
  title: string;
  developer: string | null;
  path: string | null;
  status: GameStatus;
  favorite: boolean;
  hidden: boolean;
  coverUrl: string | null;
};
export type GameDownloadFinished = { gameId: string; gameSource: GameSource };
export type GameDownloadProgress = {
  gameId: string;
  gameSource: GameSource;
  downloaded: number;
};
export type GameDownloadQueued = {
  gameId: string;
  gameSource: GameSource;
  gameTitle: string;
  downloadSize: number;
  downloaded: number;
};
export type GameFilters = { query: string | null };
export type GameHidden = { gameId: string; gameSource: GameSource };
export type GameInstalled = { gameId: string; gameSource: GameSource };
export type GameSource = "itchio" | "legacyGames" | "epicGames";
export type GameStatus =
  | "installed"
  | "notInstalled"
  | "downloading"
  | "installing"
  | "uninstalling";
export type GameUninstalled = { gameId: string; gameSource: GameSource };
export type GameUninstalling = { gameId: string; gameSource: GameSource };
export type GameVersion = { id: string; name: string; external: boolean };
export type GameVersionInfo = { installSize: number; downloadSize: number };

/** tauri-specta globals **/

import {
  invoke as TAURI_INVOKE,
  Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
